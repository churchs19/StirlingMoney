//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shane.Church.StirlingMoney.Data.Sync
{
    public class IsoStore_OfflineContext : Microsoft.Synchronization.ClientServices.IsolatedStorage.IsolatedStorageOfflineContext {
        
        private const string SyncScopeName = "DefaultScope";
        
        public IsoStore_OfflineContext(string cachePath, System.Uri serviceUri) : 
                base(IsoStore_OfflineContext.GetSchema(), SyncScopeName, cachePath, serviceUri) {
        }
        
        public IsoStore_OfflineContext(string cachePath, System.Uri serviceUri, System.Security.Cryptography.SymmetricAlgorithm symmAlgorithm) : 
                base(IsoStore_OfflineContext.GetSchema(), SyncScopeName, cachePath, serviceUri, symmAlgorithm) {
        }
        
        public System.Collections.Generic.IEnumerable<Account> AccountCollection {
            get {
                return base.GetCollection<Account>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<Category> CategoryCollection {
            get {
                return base.GetCollection<Category>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<Transaction> TransactionCollection {
            get {
                return base.GetCollection<Transaction>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<Budget> BudgetCollection {
            get {
                return base.GetCollection<Budget>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<Goal> GoalCollection {
            get {
                return base.GetCollection<Goal>();
            }
        }
        
        public void AddAccount(Account entity) {
            base.AddItem<Account>(entity);
        }
        
        public void DeleteAccount(Account entity) {
            base.DeleteItem<Account>(entity);
        }
        
        public void AddCategory(Category entity) {
            base.AddItem<Category>(entity);
        }
        
        public void DeleteCategory(Category entity) {
            base.DeleteItem<Category>(entity);
        }
        
        public void AddTransaction(Transaction entity) {
            base.AddItem<Transaction>(entity);
        }
        
        public void DeleteTransaction(Transaction entity) {
            base.DeleteItem<Transaction>(entity);
        }
        
        public void AddBudget(Budget entity) {
            base.AddItem<Budget>(entity);
        }
        
        public void DeleteBudget(Budget entity) {
            base.DeleteItem<Budget>(entity);
        }
        
        public void AddGoal(Goal entity) {
            base.AddItem<Goal>(entity);
        }
        
        public void DeleteGoal(Goal entity) {
            base.DeleteItem<Goal>(entity);
        }
        
        private static Microsoft.Synchronization.ClientServices.IsolatedStorage.IsolatedStorageSchema GetSchema() {
            Microsoft.Synchronization.ClientServices.IsolatedStorage.IsolatedStorageSchema schema = new Microsoft.Synchronization.ClientServices.IsolatedStorage.IsolatedStorageSchema();
            schema.AddCollection<Account>();
            schema.AddCollection<Category>();
            schema.AddCollection<Transaction>();
            schema.AddCollection<Budget>();
            schema.AddCollection<Goal>();
            return schema;
        }
    }
}
